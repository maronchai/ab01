<!DOCTYPE html>
<html>
<head>
<title>シンプルなブロック崩し</title>
<style>
  /* CSS: ゲーム画面のスタイル */
  body {
    background: #eee;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    font-family: sans-serif;
  }
  canvas {
    background: #000000;
    display: block;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  }
</style>
</head>
<body>

<canvas id="myCanvas" width="480" height="320"></canvas>

<script>
// JavaScript: ゲームロジック

// 1. セットアップ
const canvas = document.getElementById("myCanvas");
const ctx = canvas.getContext("2d");

// ボール
let x = canvas.width / 2;
let y = canvas.height - 30;
let dx = 2; // X方向の速度
let dy = -2; // Y方向の速度
const ballRadius = 10;

// パドル（台）
const paddleHeight = 10;
const paddleWidth = 75;
let paddleX = (canvas.width - paddleWidth) / 2;
let rightPressed = false;
let leftPressed = false;

// ブロック
const brickRowCount = 3;
const brickColumnCount = 5;
const brickWidth = 75;
const brickHeight = 20;
const brickPadding = 10;
const brickOffsetTop = 30;
const brickOffsetLeft = 30;
const bricks = [];

for (let c = 0; c < brickColumnCount; c++) {
  bricks[c] = [];
  for (let r = 0; r < brickRowCount; r++) {
    // status: 1 は「壊れていない」
    bricks[c][r] = { x: 0, y: 0, status: 1 };
  }
}

// スコア
let score = 0;

// 2. イベントリスナー（キー操作）
document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);

function keyDownHandler(e) {
  if (e.key === "Right" || e.key === "ArrowRight") {
    rightPressed = true;
  } else if (e.key === "Left" || e.key === "ArrowLeft") {
    leftPressed = true;
  }
}

function keyUpHandler(e) {
  if (e.key === "Right" || e.key === "ArrowRight") {
    rightPressed = false;
  } else if (e.key === "Left" || e.key === "ArrowLeft") {
    leftPressed = false;
  }
}

// 3. 描画関数

// ボールを描画
function drawBall() {
  ctx.beginPath();
  ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
  ctx.fillStyle = "#0095DD"; // 青色
  ctx.fill();
  ctx.closePath();
}

// パドルを描画
function drawPaddle() {
  ctx.beginPath();
  ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
  ctx.fillStyle = "#0095DD";
  ctx.fill();
  ctx.closePath();
}

// ブロックを描画
function drawBricks() {
  for (let c = 0; c < brickColumnCount; c++) {
    for (let r = 0; r < brickRowCount; r++) {
      if (bricks[c][r].status === 1) { // 壊れていないブロックのみ描画
        const brickX = (c * (brickWidth + brickPadding)) + brickOffsetLeft;
        const brickY = (r * (brickHeight + brickPadding)) + brickOffsetTop;
        bricks[c][r].x = brickX;
        bricks[c][r].y = brickY;
        ctx.beginPath();
        ctx.rect(brickX, brickY, brickWidth, brickHeight);
        ctx.fillStyle = "#00DD66"; // 緑色
        ctx.fill();
        ctx.closePath();
      }
    }
  }
}

// スコアを描画
function drawScore() {
  ctx.font = "16px Arial";
  ctx.fillStyle = "#FFFFFF";
  ctx.fillText("Score: " + score, 8, 20); // 左上に表示
}

// 4. 衝突判定ロジック
function collisionDetection() {
  for (let c = 0; c < brickColumnCount; c++) {
    for (let r = 0; r < brickRowCount; r++) {
      const b = bricks[c][r];
      if (b.status === 1) {
        // ボールがブロックの内側にあるかチェック
        if (
          x > b.x &&
          x < b.x + brickWidth &&
          y > b.y &&
          y < b.y + brickHeight
        ) {
          dy = -dy; // ボールのY方向を反転
          b.status = 0; // ブロックを壊す
          score++; // スコア加算

          // 全てのブロックを壊したらゲームクリア
          if (score === brickRowCount * brickColumnCount) {
            alert("おめでとうございます！ゲームクリア！");
            document.location.reload(); // ページをリロードしてゲームを最初から
          }
        }
      }
    }
  }
}

// 5. メインの描画ループ
function draw() {
  // 毎フレーム、キャンバス全体をクリア
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // 全ての要素を描画
  drawBricks();
  drawBall();
  drawPaddle();
  drawScore();
  collisionDetection();

  // ボールの動きと壁の反射
  if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) {
    dx = -dx; // 左右の壁で反射
  }
  if (y + dy < ballRadius) {
    dy = -dy; // 上の壁で反射
  } else if (y + dy > canvas.height - ballRadius) {
    // ボールが下に落ちた場合（ゲームオーバー判定）

    // パドルに当たったかチェック
    if (x > paddleX && x < paddleX + paddleWidth) {
      dy = -dy; // パドルで反射
    } else {
      // パドルに当たらなかった
      alert("GAME OVER");
      document.location.reload(); // ページをリロードしてゲームを最初から
    }
  }

  // パドルの動き
  if (rightPressed && paddleX < canvas.width - paddleWidth) {
    paddleX += 7;
  } else if (leftPressed && paddleX > 0) {
    paddleX -= 7;
  }

  // ボールの位置を更新
  x += dx;
  y += dy;

  // 描画を繰り返す (スムーズなアニメーションのために)
  requestAnimationFrame(draw);
}

// ゲーム開始
draw();
</script>

</body>
</html>
